# Versione 2.0.0 del 01/06/2025 - Ottimizzata per MicroK8s
name: Test Java JSP CI/CD

on:
  push:
    branches: [ main ]
#  pull_request:
#    branches: [ master ]
  workflow_dispatch:

env:
  REGISTRY: localhost:32000
  IMAGE_NAME: date-webapp
  K8S_NAMESPACE: test-webapp

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      #**********************************************
      # Checkout del codice
      #**********************************************

      - uses: actions/checkout@v4

      #**********************************************
      # Imposta la JDK per l'app
      #**********************************************
      - name: Configura JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      #**********************************************
      # Cache delle dipendenze Maven
      #**********************************************
      - name: Cache local Maven repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      #**********************************************
      # Test Applicazione
      #**********************************************
      - name: Build e Test con Maven
        run: mvn clean test

      #**********************************************
      # Preparazione/Package App
      #**********************************************
      - name: Build App
        run: mvn clean package

      #**********************************************
      # Upload dell'artifact (da vedere come
      # riusarlo nel docker
      #**********************************************
      - name: Upload WAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: date-webapp.war
          path: target/date-webapp.war
          retention-days: 1

  docker-build-push:
    needs: build-and-test  # Aspetta che i test passino prima di buildare Docker
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    runs-on: ubuntu-latest
    steps:

      #**********************************************
      # Checkout del codice per Docker
      #**********************************************
      - uses: actions/checkout@v4

      #**********************************************
      # Download del WAR buildato nel job precedente
      #**********************************************
      - name: Download WAR artifact
        uses: actions/download-artifact@v4
        with:
          name: date-webapp.war
          path: target/

      #**********************************************
      # Login Docker
      #**********************************************
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      #**********************************************
      # Setup QEMU (Emulatore per architetture
      # diverse - amd64, arm, Raspberry)
      #**********************************************
      #- name: Set up QEMU
      #  uses: docker/setup-qemu-action@v3

      #**********************************************
      # Setup buildx
      #**********************************************
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: khamsin/date-webapp
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      #**********************************************
      # Build Image from Dockerfile and push
      #**********************************************
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            khamsin/date-webapp:latest
            khamsin/date-webapp:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}


  deploy-to-microk8s:
    needs: docker-build-push
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      # ============================================
      # PRE-DEPLOYMENT CHECKS
      # ============================================
      - name: Verify MicroK8s Status
        run: |
          echo "üîç Checking MicroK8s status..."
          microk8s status --wait-ready --timeout 60
          
          echo "üîç Checking registry availability..."
          microk8s kubectl get service registry -n container-registry || {
            echo "‚ùå Registry not enabled. Enabling..."
            microk8s enable registry
            microk8s status --wait-ready
          }

      - name: Verify Docker Configuration
        run: |
          echo "üîç Checking Docker daemon configuration..."
          if ! docker info | grep -q "localhost:32000"; then
            echo "‚ö†Ô∏è Registry localhost:32000 not in insecure registries"
            echo "Please add to /etc/docker/daemon.json"
          fi

      # ============================================
      # IMAGE MANAGEMENT - BEST PRACTICE
      # ============================================
      - name: Pull and Push to Local Registry
        run: |
          echo "üì• Pulling image from Docker Hub..."
          docker pull khamsin/date-webapp:${{ github.sha }}
          
          echo "üè∑Ô∏è Tagging for local registry..."
          docker tag khamsin/date-webapp:${{ github.sha }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker tag khamsin/date-webapp:${{ github.sha }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          echo "üì§ Pushing to MicroK8s registry..."
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          echo "‚úÖ Image successfully pushed to local registry"

      # ============================================
      # NAMESPACE MANAGEMENT
      # ============================================
      - name: Ensure Namespace Exists
        run: |
          echo "üîß Creating/updating namespace..."
          microk8s kubectl create namespace ${{ env.K8S_NAMESPACE }} \
            --dry-run=client -o yaml | microk8s kubectl apply -f -

      # ============================================
      # MANIFEST VALIDATION
      # ============================================
      - name: Validate Kubernetes Manifests
        run: |
          echo "üîç Validating manifests..."
          
          # Dry-run per validare i manifest
          microk8s kubectl apply -f k8s/deployment.yaml --dry-run=client
          microk8s kubectl apply -f k8s/service.yaml --dry-run=client
          
          echo "‚úÖ Manifests are valid"

      # ============================================
      # DEPLOYMENT APPLICATION
      # ============================================
      - name: Apply Kubernetes Manifests
        run: |
          echo "üìã Applying Kubernetes manifests..."
          
          # Applica i manifest con annotazioni per tracking
          microk8s kubectl apply -f k8s/deployment.yaml \
            --namespace=${{ env.K8S_NAMESPACE }} \
            --record
          
          microk8s kubectl apply -f k8s/service.yaml \
            --namespace=${{ env.K8S_NAMESPACE }}
          
          echo "‚úÖ Manifests applied successfully"

      # ============================================
      # IMAGE UPDATE - ZERO DOWNTIME
      # ============================================
      - name: Update Deployment Image
        run: |
          echo "üöÄ Updating deployment with new image..."
          
          # Aggiorna l'immagine del deployment
          microk8s kubectl set image deployment/date-webapp-deployment \
            webapp=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --namespace=${{ env.K8S_NAMESPACE }} \
            --record
          
          # Annota il deployment con metadata del deploy
          microk8s kubectl annotate deployment/date-webapp-deployment \
            deployment.kubernetes.io/revision-history-limit=10 \
            app.kubernetes.io/version=${{ github.sha }} \
            app.kubernetes.io/deployed-by="github-actions" \
            app.kubernetes.io/deployed-at="$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            --namespace=${{ env.K8S_NAMESPACE }} \
            --overwrite

      # ============================================
      # ROLLOUT MONITORING - CRITICAL
      # ============================================
      - name: Wait for Rollout Completion
        timeout-minutes: 10
        run: |
          echo "‚è≥ Waiting for rollout to complete..."
          
          # Aspetta il rollout con timeout
          microk8s kubectl rollout status deployment/date-webapp-deployment \
            --namespace=${{ env.K8S_NAMESPACE }} \
            --timeout=600s
          
          echo "‚úÖ Rollout completed successfully"

      # ============================================
      # POST-DEPLOYMENT VERIFICATION
      # ============================================
      - name: Verify Deployment Health
        run: |
          echo "üîç Verifying deployment health..."
          
          # Verifica che i pod siano running
          echo "üìä Pod Status:"
          microk8s kubectl get pods -l app=date-webapp \
            --namespace=${{ env.K8S_NAMESPACE }} \
            -o wide
          
          # Verifica che il service sia attivo
          echo "üåê Service Status:"
          microk8s kubectl get services \
            --namespace=${{ env.K8S_NAMESPACE }}
          
          # Verifica deployment details
          echo "üöÄ Deployment Status:"
          microk8s kubectl describe deployment/date-webapp-deployment \
            --namespace=${{ env.K8S_NAMESPACE }}
          
          # Health check dei pod
          echo "‚ù§Ô∏è Pod Health Check:"
          microk8s kubectl get pods -l app=date-webapp \
            --namespace=${{ env.K8S_NAMESPACE }} \
            -o jsonpath='{.items[*].status.phase}' | grep -q "Running" || {
            echo "‚ùå Some pods are not running"
            exit 1
          }
          
          echo "‚úÖ All verification checks passed"

      # ============================================
      # CLEANUP
      # ============================================
      - name: Cleanup Old Images
        run: |
          echo "üßπ Cleaning up old Docker images..."
          
          # Mantieni solo le ultime 3 versioni
          docker images khamsin/date-webapp --format "table {{.Tag}}\t{{.ID}}" | \
            tail -n +4 | head -n -3 | awk '{print \$2}' | \
            xargs -r docker rmi || true
          
          # Cleanup delle immagini non utilizzate
          docker system prune -f --filter "until=24h" || true
          
          echo "‚úÖ Cleanup completed"

      # ============================================
      # ROLLBACK PREPARATION
      # ============================================
      - name: Prepare Rollback Information
        if: failure()
        run: |
          echo "‚ö†Ô∏è Deployment failed. Preparing rollback..."
          
          # Mostra la storia dei rollout
          microk8s kubectl rollout history deployment/date-webapp-deployment \
            --namespace=${{ env.K8S_NAMESPACE }}
          
          # Comando per rollback manuale (se necessario)
          echo "üîÑ To rollback manually, run:"
          echo "microk8s kubectl rollout undo deployment/date-webapp-deployment --namespace=${{ env.K8S_NAMESPACE }}"
