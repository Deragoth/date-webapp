apiVersion: apps/v1
kind: Deployment
metadata:
  name: date-webapp-deployment
  namespace: test-webapp
  labels:
    app: date-webapp
    version: v1
    environment: production
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: date-webapp
  template:
    metadata:
      labels:
        app: date-webapp
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      automountServiceAccountToken: false  # <- AGGIUNTO: disabilita automount
      # Aggiunta contesto di autorizzazione per tutti i container del POD
      securityContext:
        runAsUser: 1001          # UID dell'utente Tomcat
        runAsGroup: 1001         # GID dell'utente Tomcat
        fsGroup: 1001            # GID per garantire l'accesso al volume
      containers:
        - name: webapp
          image: localhost:32000/date-webapp:latest
          ports:
            - containerPort: 8080
              name: http

          # Importazione delle variabili dal ConfigMap
          envFrom:
            - configMapRef:
                name: date-webapp-config
            - secretRef:
                name: date-webapp-secrets
          # Aggiunta volume
          volumeMounts:
            - name: txt-volume
              mountPath: "/usr/local/tomcat/text-data" # Path del volume
          resources:
            requests:
              memory: "256Mi"
              cpu: "200m"
              ephemeral-storage: "1Gi"    # per evitare riempimento
            limits:
              memory: "512Mi"
              cpu: "500m"
              ephemeral-storage: "2Gi"    # per evitare riempimento
          livenessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3
          env:
            - name: JAVA_OPTS
              value: "-Xmx256m -Xms128m"
            - name: APP_VERSION
              value: "1.0.0"
          imagePullPolicy: Always
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      volumes: # VOLUMI
        - name: txt-volume
          hostPath:
            # Con hostPath e DirectoryOrCreate si puÃ² solo usare un percorso presente nell'host su cui gira K8s
            # Definire i permessi di questo path come quelli assegnati nel Dockerfile all'app altrimenti associa 'root'
            path: "/data/k8s-text-file/" # Percorso sull'host (nodo)
            type: DirectoryOrCreate